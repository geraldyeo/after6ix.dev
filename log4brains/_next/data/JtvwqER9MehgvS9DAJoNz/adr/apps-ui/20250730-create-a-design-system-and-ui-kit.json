{"pageProps":{"projectName":"@after6ix","currentAdr":{"slug":"apps-ui/20250730-create-a-design-system-and-ui-kit","package":"apps-ui","title":"Create a design system and ui-kit","status":"proposed","supersededBy":null,"tags":["design-system","ui-kit","frontend","monorepo"],"deciders":["Gerald Yeo","Engineering Team"],"body":{"enhancedMdx":"\nTechnical Story: Create a unified design system and UI kit for the After6ix monorepo to ensure consistency across all applications and improve development velocity.\n\n## Context and Problem Statement\n\nThe After6ix monorepo contains multiple applications (site, cv) that currently lack a unified design language. Without a centralized design system and UI kit, each application may develop inconsistent visual patterns, duplicate component implementations, and create a fragmented user experience. How can we establish a comprehensive design system that promotes consistency, reusability, and accelerates development across all workspace applications?\n\n## Decision Drivers\n\n- **Consistency**: Need for unified visual language across all After6ix applications\n- **Developer Velocity**: Reduce duplicate work by providing reusable components\n- **Maintainability**: Centralized updates to design tokens and components\n- **Brand Identity**: Establish a distinctive After6ix brand through consistent design\n- **Scalability**: Support future applications and features without design debt\n- **TypeScript Support**: Leverage the monorepo's TypeScript-first approach for type-safe components\n- **Performance**: Optimize bundle sizes through shared component libraries\n\n## Considered Options\n\n1. **Build Custom Design System** - Create a bespoke design system tailored to After6ix needs\n2. **Adopt Existing Design System** - Use established systems like Material-UI, Ant Design, or Chakra UI\n3. **Hybrid Approach** - Build custom system on top of headless UI libraries (Radix UI, Headless UI)\n4. **shadcn/ui Approach** - Use shadcn/ui as foundation, customizing components with our design tokens\n5. **CSS Framework Only** - Use Tailwind CSS with custom component library\n\n## Decision Outcome\n\nChosen option: **\"shadcn/ui Approach\"** - Use shadcn/ui as the foundation for our design system, customizing it with After6ix design tokens and extending with additional components as needed.\n\nThis approach provides:\n\n- Battle-tested component patterns built on Radix UI\n- Copy-paste architecture allows full ownership and customization\n- Accessibility-first components from Radix UI\n- Modern patterns using Tailwind CSS and CSS variables\n- Type-safe component APIs with TypeScript\n- No external dependencies - components live in our codebase\n- Easy to extend and modify to match After6ix brand\n- Active community and regular updates to reference\n\n### Positive Consequences\n\n- **Unified Brand Experience**: Consistent look and feel across all After6ix applications\n- **Faster Development**: Pre-built components accelerate feature development\n- **Improved Accessibility**: Radix UI provides WCAG-compliant components out of the box\n- **Type Safety**: Full TypeScript support with auto-completion and compile-time checks\n- **Design Token System**: Centralized management of colors, spacing, typography\n- **Documentation**: Built-in component documentation and usage examples\n- **Testing**: Easier to test with isolated component libraries\n\n### Negative Consequences\n\n- **Initial Investment**: Significant upfront time required to build the system\n- **Learning Curve**: Team needs to learn new design token conventions and component APIs\n- **Maintenance Overhead**: Ongoing maintenance of the design system package\n- **Migration Effort**: Existing components need to be refactored to use the new system\n\n## Pros and Cons of the Options\n\n### Build Custom Design System\n\nFully custom implementation from scratch\n\n- Good, because complete control over every aspect\n- Good, because can optimize for specific After6ix needs\n- Bad, because requires significant development time\n- Bad, because need to handle accessibility ourselves\n- Bad, because higher risk of bugs and edge cases\n\n### Adopt Existing Design System\n\nUse Material-UI, Ant Design, or similar\n\n- Good, because immediate productivity with pre-built components\n- Good, because well-tested and documented\n- Good, because large community support\n- Bad, because limited customization without overrides\n- Bad, because larger bundle sizes\n- Bad, because may not align with After6ix brand vision\n\n### Hybrid Approach\n\nRadix UI primitives + Tailwind CSS + Custom tokens\n\n- Good, because accessibility handled by Radix UI\n- Good, because full control over visual design\n- Good, because smaller bundle size (only import what you use)\n- Good, because can leverage Tailwind's utility classes\n- Good, because headless components are framework-agnostic\n- Bad, because requires implementing all styling from scratch\n- Bad, because need to solve common patterns ourselves\n\n### shadcn/ui Approach (Chosen)\n\nUse shadcn/ui components as foundation with custom theming\n\n- Good, because proven component patterns and implementations\n- Good, because copy-paste means we own the code\n- Good, because built on Radix UI (accessibility included)\n- Good, because uses modern CSS variables for theming\n- Good, because active community and examples\n- Good, because easy to customize with our design tokens\n- Good, because no lock-in to external library\n- Bad, because need to adapt default styles to After6ix brand\n- Bad, because must maintain copied components\n\n### CSS Framework Only\n\nTailwind CSS with custom React components\n\n- Good, because quick to implement basic components\n- Good, because utility-first approach is flexible\n- Bad, because no accessibility primitives\n- Bad, because need to implement complex interactions from scratch\n- Bad, because inconsistent component APIs without a framework\n\n## Implementation Plan\n\n### Phase 1: Foundation (Week 1-2)\n\n- Set up `@after6ix/ui` package in the monorepo\n- Configure shadcn/ui CLI and components.json\n- Adapt shadcn/ui's CSS variables to After6ix design tokens\n- Install initial set of core components (Button, Card, Input, etc.)\n- Create custom theme configuration with our color palette\n\n### Phase 2: Core Components (Week 3-4)\n\n- Customize shadcn/ui components with After6ix styling\n- Add additional components not in shadcn/ui as needed\n- Set up Storybook for component documentation\n- Create usage guidelines showing After6ix patterns\n\n### Phase 3: Advanced Components (Week 5-6)\n\n- Build complex components (DataTable, Forms, Modals)\n- Implement responsive design patterns\n- Add animation and interaction patterns\n\n### Phase 4: Integration (Week 7-8)\n\n- Migrate existing apps to use design system\n- Refine based on real-world usage\n- Document migration guide\n\n## Design Tokens Structure\n\n### Color System\n\nBased on the \"After6ix - Where Code Comes Alive\" brand concept, our color palette draws inspiration from twilight hours when developers do their best work.\n\n```typescript\n// Color token structure\ninterface ColorTokens {\n  // Primary - Twilight Purple\n  primary: {\n    50: '#FAF5FF';\n    100: '#F3E8FF';\n    200: '#E9D5FF';\n    300: '#D8B4FE';\n    400: '#C084FC';\n    500: '#A855F7';\n    600: '#9333EA'; // Base\n    700: '#7C3AED';\n    800: '#6B46C1';\n    900: '#581C87';\n  };\n  \n  // Secondary - Deep Sky\n  secondary: {\n    50: '#EFF6FF';\n    100: '#DBEAFE';\n    200: '#BFDBFE';\n    300: '#93C5FD';\n    400: '#60A5FA';\n    500: '#3B82F6';\n    600: '#2563EB'; // Base\n    700: '#1D4ED8';\n    800: '#1E40AF';\n    900: '#1E3A8A';\n  };\n  \n  // Accent - Electric Cyan\n  accent: {\n    50: '#ECFEFF';\n    100: '#CFFAFE';\n    200: '#A5F3FC';\n    300: '#67E8F9';\n    400: '#22D3EE';\n    500: '#06B6D4'; // Base\n    600: '#0891B2';\n    700: '#0E7490';\n    800: '#155E75';\n    900: '#164E63';\n  };\n  \n  // Neutrals - Charcoal\n  neutral: {\n    50: '#FAFAFA';\n    100: '#F4F4F5';\n    200: '#E4E4E7';\n    300: '#D4D4D8';\n    400: '#A1A1AA';\n    500: '#71717A';\n    600: '#52525B';\n    700: '#3F3F46';\n    800: '#27272A';\n    900: '#18181B';\n  };\n  \n  // Semantic colors\n  semantic: {\n    success: { light: '#10B981'; base: '#059669'; dark: '#047857' };\n    error: { light: '#F87171'; base: '#EF4444'; dark: '#DC2626' };\n    warning: { light: '#FBBF24'; base: '#F59E0B'; dark: '#D97706' };\n    info: { light: '#38BDF8'; base: '#0EA5E9'; dark: '#0284C7' };\n  };\n}\n```\n\n### Typography System\n\n```typescript\ninterface TypographyTokens {\n  fonts: {\n    sans: 'Inter, system-ui, -apple-system, sans-serif';\n    mono: 'JetBrains Mono, Consolas, Monaco, monospace';\n  };\n  \n  sizes: {\n    xs: '0.75rem';    // 12px\n    sm: '0.875rem';   // 14px\n    base: '1rem';     // 16px\n    lg: '1.125rem';   // 18px\n    xl: '1.25rem';    // 20px\n    '2xl': '1.5rem';  // 24px\n    '3xl': '1.875rem'; // 30px\n    '4xl': '2.25rem'; // 36px\n    '5xl': '3rem';    // 48px\n  };\n  \n  weights: {\n    thin: 100;\n    light: 300;\n    normal: 400;\n    medium: 500;\n    semibold: 600;\n    bold: 700;\n    extrabold: 800;\n  };\n  \n  lineHeights: {\n    tight: 1.25;\n    snug: 1.375;\n    normal: 1.5;\n    relaxed: 1.625;\n    loose: 2;\n  };\n}\n```\n\n### Spacing & Layout\n\n```typescript\ninterface SpacingTokens {\n  0: '0';\n  1: '0.25rem';   // 4px\n  2: '0.5rem';    // 8px\n  3: '0.75rem';   // 12px\n  4: '1rem';      // 16px\n  5: '1.25rem';   // 20px\n  6: '1.5rem';    // 24px\n  8: '2rem';      // 32px\n  10: '2.5rem';   // 40px\n  12: '3rem';     // 48px\n  16: '4rem';     // 64px\n  20: '5rem';     // 80px\n  24: '6rem';     // 96px\n}\n\ninterface RadiusTokens {\n  none: '0';\n  sm: '0.125rem';  // 2px\n  base: '0.25rem'; // 4px\n  md: '0.375rem';  // 6px\n  lg: '0.5rem';    // 8px\n  xl: '0.75rem';   // 12px\n  '2xl': '1rem';   // 16px\n  '3xl': '1.5rem'; // 24px\n  full: '9999px';\n}\n```\n\n### Effects\n\n```typescript\ninterface ShadowTokens {\n  xs: '0 1px 2px 0 rgb(0 0 0 / 0.05)';\n  sm: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)';\n  base: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)';\n  md: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)';\n  lg: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)';\n  xl: '0 25px 50px -12px rgb(0 0 0 / 0.25)';\n  inner: 'inset 0 2px 4px 0 rgb(0 0 0 / 0.05)';\n  none: 'none';\n}\n\ninterface AnimationTokens {\n  durations: {\n    fast: '150ms';\n    base: '250ms';\n    slow: '400ms';\n    slower: '600ms';\n  };\n  \n  easings: {\n    linear: 'linear';\n    in: 'cubic-bezier(0.4, 0, 1, 1)';\n    out: 'cubic-bezier(0, 0, 0.2, 1)';\n    inOut: 'cubic-bezier(0.4, 0, 0.2, 1)';\n    bounce: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)';\n  };\n}\n```\n\n## Design Token Integration with shadcn/ui\n\n### Customization Approaches\n\nshadcn/ui provides multiple layers of customization since you own the code:\n\n#### 1. CSS Variables (Theme Layer)\n\n- Modify CSS custom properties in your global CSS\n- Perfect for color schemes, spacing, and typography\n- Maintains consistency across all components\n\n#### 2. Component Code (Structure Layer)\n\n- Directly edit the copied component files\n- Add new props, change behavior, modify structure\n- Full TypeScript support for type-safe modifications\n\n#### 3. Tailwind Classes (Style Layer)\n\n- Modify className strings in components\n- Use class-variance-authority for variant management\n- Extend with custom utility classes\n\n#### 4. Component Composition (API Layer)\n\n- Wrap shadcn/ui components with your own\n- Add business logic and custom props\n- Create compound components for complex UIs\n\n### How Our Tokens Map to shadcn/ui\n\nshadcn/ui uses CSS variables for theming, which allows us to seamlessly integrate our After6ix design tokens:\n\n1. **Color Tokens**: Our color scales map to CSS custom properties in HSL format\n2. **Typography Tokens**: Font families, sizes, and weights integrate via Tailwind config\n3. **Spacing Tokens**: Direct mapping to Tailwind's spacing scale\n4. **Effect Tokens**: Shadows and animations extend Tailwind's defaults\n\n### Token Configuration\n\n```typescript\n// tailwind.config.ts\nexport default {\n  theme: {\n    extend: {\n      colors: {\n        // After6ix color scales available as utilities\n        primary: {\n          50: 'hsl(var(--primary-50))',\n          100: 'hsl(var(--primary-100))',\n          // ... through 900\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: { /* ... */ },\n        accent: { /* ... */ },\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', '-apple-system', 'sans-serif'],\n        mono: ['JetBrains Mono', 'Consolas', 'Monaco', 'monospace'],\n      },\n      spacing: {\n        // Extends with our token values\n      },\n      animation: {\n        'fade-in': 'fadeIn var(--duration-base) var(--easing-out)',\n        'slide-up': 'slideUp var(--duration-slow) var(--easing-out)',\n      },\n    },\n  },\n};\n```\n\n### Customization Examples\n\n#### 1. Theme Customization (CSS Variables)\n\n```css\n/* globals.css - Override shadcn/ui defaults with After6ix tokens */\n:root {\n  --primary: 267 80% 58%; /* Twilight Purple */\n  --secondary: 221 83% 53%; /* Deep Sky */\n  --accent: 189 94% 43%; /* Electric Cyan */\n}\n```\n\n#### 2. Component Structure Customization\n\n```tsx\n// components/ui/button.tsx - Add loading state\nexport interface ButtonProps extends /* ... */ {\n  loading?: boolean;\n  icon?: React.ReactNode;\n}\n\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ loading, icon, children, disabled, ...props }, ref) => {\n    return (\n      <Comp disabled={disabled || loading} {...props}>\n        {loading && <Spinner className=\"mr-2\" />}\n        {icon && <span className=\"mr-2\">{icon}</span>}\n        {children}\n      </Comp>\n    );\n  }\n);\n```\n\n#### 3. Style Customization (Tailwind)\n\n```tsx\n// components/ui/card.tsx - After6ix branded card\nconst cardVariants = cva(\n  \"rounded-xl border transition-all duration-base\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card border-border\",\n        elevated: \"bg-card shadow-lg border-transparent\",\n        gradient: \"bg-gradient-to-br from-primary-50 to-secondary-50 border-primary-200\",\n        glass: \"bg-white/80 backdrop-blur-sm border-white/20\",\n      }\n    }\n  }\n);\n```\n\n#### 4. Component Composition\n\n```tsx\n// components/after6ix/feature-card.tsx\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\nexport function FeatureCard({ \n  title, \n  description, \n  icon, \n  badge,\n  gradient = false \n}: FeatureCardProps) {\n  return (\n    <Card variant={gradient ? \"gradient\" : \"elevated\"}>\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div className=\"p-2 rounded-lg bg-primary-100 text-primary-600\">\n            {icon}\n          </div>\n          {badge && <Badge variant=\"secondary\">{badge}</Badge>}\n        </div>\n        <h3 className=\"text-xl font-semibold mt-4\">{title}</h3>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-muted-foreground\">{description}</p>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n### Best Practices for Maintainable Design System\n\nFor a scalable and maintainable design system using shadcn/ui and Tailwind, we recommend a layered approach:\n\n#### 1. Foundation Layer (CSS Variables + Tailwind Config)\n\n**Use for**: Brand colors, typography, spacing, shadows, animations\n**Why**: Single source of truth, easy to update globally, maintains consistency\n\n```typescript\n// tailwind.config.ts - Core design tokens\nexport default {\n  theme: {\n    extend: {\n      colors: {\n        // Reference CSS variables\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n      },\n    },\n  },\n};\n\n// globals.css - Brand-specific values\n:root {\n  --primary: 267 80% 58%; /* After6ix Twilight Purple */\n}\n```\n\n#### 2. Component Layer (Minimal Modifications)\n\n**Use for**: Adding essential props, fixing accessibility issues\n**Why**: Preserves upgrade path, reduces maintenance burden\n\n```tsx\n// ✅ Good: Extend with new props\nexport interface ButtonProps extends BaseButtonProps {\n  loading?: boolean;\n}\n\n// ❌ Avoid: Changing core behavior\n// Don't modify the underlying Radix UI implementation\n```\n\n#### 3. Variant Layer (CVA Extensions)\n\n**Use for**: New visual styles, component states\n**Why**: Leverages existing patterns, type-safe, predictable\n\n```tsx\n// ✅ Good: Add new variants\nconst buttonVariants = cva(baseClasses, {\n  variants: {\n    variant: {\n      ...existingVariants,\n      brand: \"bg-gradient-to-r from-primary-600 to-secondary-600\",\n    },\n  },\n});\n```\n\n#### 4. Composition Layer (New Components)\n\n**Use for**: Business-specific components, complex patterns\n**Why**: Keeps base components clean, enables reuse\n\n```tsx\n// ✅ Good: Compose from primitives\nexport function FeatureCard({ ...props }) {\n  return (\n    <Card>\n      <CardHeader>...</CardHeader>\n      <CardContent>...</CardContent>\n    </Card>\n  );\n}\n```\n\n### Recommended Architecture\n\n```ascii\n@after6ix/ui/\n├── styles/\n│   ├── globals.css          # CSS variables, base styles\n│   └── tokens.ts            # TypeScript token exports\n├── components/\n│   ├── ui/                  # shadcn/ui components (minimal changes)\n│   │   ├── button.tsx\n│   │   ├── card.tsx\n│   │   └── ...\n│   └── after6ix/            # Custom composed components\n│       ├── feature-card.tsx\n│       ├── pricing-table.tsx\n│       └── ...\n├── lib/\n│   └── utils.ts             # Shared utilities\n└── index.ts                 # Public API exports\n```\n\n### Maintenance Guidelines\n\n1. **Minimize Core Changes**: Keep shadcn/ui components as close to original as possible\n2. **Document Deviations**: When you must modify core components, document why\n3. **Use Composition**: Build complex components by composing primitives\n4. **Centralize Tokens**: All design decisions in CSS variables and Tailwind config\n5. **Version Control**: Tag releases when updating shadcn/ui components\n6. **Testing Strategy**: Focus tests on custom components and compositions\n\n### Anti-Patterns to Avoid\n\n```tsx\n// ❌ Don't: Heavily modify core components\n// This makes updates difficult\nconst Button = () => {\n  // 100+ lines of custom logic\n};\n\n// ❌ Don't: Inline style overrides\n<Button style={{ backgroundColor: '#9333EA' }} />\n\n// ❌ Don't: Create divergent component APIs\n<Button color=\"purple\" size=\"medium\" /> // Non-standard props\n```\n\n### Upgrade Strategy\n\nWhen shadcn/ui releases updates:\n\n1. Review changelog for breaking changes\n2. Copy new component versions to a branch\n3. Reapply minimal modifications\n4. Test composed components\n5. Update documentation\n\nThis approach balances customization needs with long-term maintainability.\n\n## Component Architecture\n\n### Component Structure\n\nEach component follows a consistent structure:\n\n```typescript\n// Component file structure\ncomponents/\n├── Button/\n│   ├── Button.tsx          // Main component\n│   ├── Button.stories.tsx  // Storybook stories\n│   ├── Button.test.tsx     // Unit tests\n│   ├── Button.types.ts     // TypeScript interfaces\n│   ├── Button.styles.ts    // Styled components/CSS\n│   └── index.ts           // Public exports\n\n// Component template\ninterface ComponentProps extends React.ComponentPropsWithoutRef<'element'> {\n  variant?: 'primary' | 'secondary' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n  // ... other props\n}\n\nexport const Component = forwardRef<HTMLElement, ComponentProps>(\n  ({ variant = 'primary', size = 'md', ...props }, ref) => {\n    // Implementation using Radix UI primitives\n  }\n);\n```\n\n### Component Categories\n\n1. **Primitives** - Basic building blocks\n   - Button, Input, Label, Textarea\n   - Typography (Heading, Text, Code)\n   - Box, Flex, Grid\n\n2. **Feedback** - User feedback components\n   - Alert, Toast, Progress, Spinner\n   - Badge, Tooltip, Popover\n\n3. **Form Controls** - Form elements\n   - Checkbox, Radio, Switch, Slider\n   - Select, DatePicker, FilePicker\n\n4. **Layout** - Structure components\n   - Container, Section, Divider\n   - Card, Panel, Accordion\n\n5. **Navigation** - Navigation elements\n   - Tabs, Breadcrumb, Pagination\n   - Menu, Navigation, Sidebar\n\n6. **Data Display** - Data visualization\n   - Table, DataGrid, List\n   - Avatar, Timeline, Stat\n\n7. **Overlays** - Modal components\n   - Dialog, Drawer, Modal\n   - ContextMenu, DropdownMenu\n\n### Component API Principles\n\n1. **Composability**: Components should work together seamlessly\n2. **Accessibility**: All components meet WCAG 2.1 AA standards\n3. **Type Safety**: Full TypeScript support with proper generics\n4. **Flexibility**: Support for `as` prop for polymorphic components\n5. **Consistency**: Similar props across similar components\n6. **Performance**: Use React.memo and proper optimization techniques\n\n### Example Implementation\n\n```typescript\n// Example: Customizing shadcn/ui Button for After6ix\nimport * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cn } from '@/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// shadcn/ui button adapted with After6ix design tokens\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        // Using After6ix twilight purple as primary\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        // Using deep sky blue as secondary\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/90',\n        // Using electric cyan for destructive/accent\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n// CSS Variables integrating After6ix design tokens with shadcn/ui\n/*\n@layer base {\n  :root {\n    /* After6ix Color Tokens mapped to shadcn/ui conventions */\n    \n    /* Primary - Twilight Purple */\n    --primary-50: 280 100% 98%; /* #FAF5FF */\n    --primary-100: 282 100% 97%; /* #F3E8FF */\n    --primary-200: 281 100% 92%; /* #E9D5FF */\n    --primary-300: 280 97% 85%; /* #D8B4FE */\n    --primary-400: 280 89% 75%; /* #C084FC */\n    --primary-500: 280 91% 65%; /* #A855F7 */\n    --primary-600: 267 80% 58%; /* #9333EA - Base */\n    --primary-700: 263 90% 58%; /* #7C3AED */\n    --primary-800: 262 72% 50%; /* #6B46C1 */\n    --primary-900: 264 67% 35%; /* #581C87 */\n    \n    /* Secondary - Deep Sky */\n    --secondary-50: 214 100% 97%; /* #EFF6FF */\n    --secondary-100: 214 95% 93%; /* #DBEAFE */\n    --secondary-200: 213 97% 87%; /* #BFDBFE */\n    --secondary-300: 212 96% 78%; /* #93C5FD */\n    --secondary-400: 213 94% 68%; /* #60A5FA */\n    --secondary-500: 217 91% 60%; /* #3B82F6 */\n    --secondary-600: 221 83% 53%; /* #2563EB - Base */\n    --secondary-700: 224 76% 48%; /* #1D4ED8 */\n    --secondary-800: 226 71% 40%; /* #1E40AF */\n    --secondary-900: 224 64% 33%; /* #1E3A8A */\n    \n    /* Accent - Electric Cyan */\n    --accent-50: 183 100% 96%; /* #ECFEFF */\n    --accent-100: 185 95% 90%; /* #CFFAFE */\n    --accent-200: 186 94% 82%; /* #A5F3FC */\n    --accent-300: 187 92% 69%; /* #67E8F9 */\n    --accent-400: 188 91% 53%; /* #22D3EE */\n    --accent-500: 189 94% 43%; /* #06B6D4 - Base */\n    --accent-600: 192 91% 36%; /* #0891B2 */\n    --accent-700: 193 82% 31%; /* #0E7490 */\n    --accent-800: 194 70% 27%; /* #155E75 */\n    --accent-900: 196 64% 24%; /* #164E63 */\n    \n    /* shadcn/ui semantic mappings using After6ix tokens */\n    --background: 0 0% 100%; /* White */\n    --foreground: 240 10% 11%; /* Charcoal 900 #18181B */\n    \n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 11%;\n    \n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 11%;\n    \n    --primary: var(--primary-600);\n    --primary-foreground: 0 0% 98%;\n    \n    --secondary: var(--secondary-600);\n    --secondary-foreground: 0 0% 98%;\n    \n    --muted: 240 5% 96%; /* Neutral 100 */\n    --muted-foreground: 240 3.8% 46%; /* Neutral 600 */\n    \n    --accent: var(--accent-500);\n    --accent-foreground: 240 10% 11%;\n    \n    --destructive: 0 84% 60%; /* Error base */\n    --destructive-foreground: 0 0% 98%;\n    \n    --border: 240 6% 90%; /* Neutral 200 */\n    --input: 240 6% 90%;\n    --ring: var(--primary-600);\n    \n    /* Spacing & Effects from After6ix tokens */\n    --radius: 0.5rem; /* radius-lg */\n    \n    /* Typography */\n    --font-sans: \"Inter\", system-ui, -apple-system, sans-serif;\n    --font-mono: \"JetBrains Mono\", Consolas, Monaco, monospace;\n  }\n  \n  .dark {\n    /* Dark mode adjustments */\n    --background: 240 10% 3.9%; /* Near black */\n    --foreground: 0 0% 95%; /* Neutral 100 */\n    \n    --card: 240 10% 9%;\n    --card-foreground: 0 0% 95%;\n    \n    --primary: 267 70% 65%; /* Adjusted for dark mode */\n    --secondary: 221 70% 60%;\n    --accent: 189 80% 50%;\n    \n    --muted: 240 5% 15%;\n    --muted-foreground: 240 5% 60%;\n    \n    --border: 240 6% 20%;\n    --input: 240 6% 20%;\n  }\n}\n\n/* Extended color utilities for After6ix palette */\n@layer utilities {\n  /* Primary color scale */\n  .text-primary-50 { color: hsl(var(--primary-50)); }\n  .text-primary-100 { color: hsl(var(--primary-100)); }\n  /* ... etc for all scales */\n  \n  .bg-primary-50 { background-color: hsl(var(--primary-50)); }\n  .bg-primary-100 { background-color: hsl(var(--primary-100)); }\n  /* ... etc for all scales */\n  \n  /* Animation durations from tokens */\n  .duration-fast { transition-duration: 150ms; }\n  .duration-base { transition-duration: 250ms; }\n  .duration-slow { transition-duration: 400ms; }\n  .duration-slower { transition-duration: 600ms; }\n}\n*/\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nButton.displayName = 'Button';\n```\n\n## Links\n\n- [shadcn/ui Documentation](https://ui.shadcn.com/)\n- [Radix UI Documentation](https://www.radix-ui.com/)\n- [Tailwind CSS](https://tailwindcss.com/)\n- [Class Variance Authority](https://cva.style/docs)\n- Related to [UI Package Setup ADR] (to be created)\n- Implements [Global Styling Strategy ADR] (to be created)\n"},"creationDate":"2025-07-31T14:34:02.000Z","lastEditDate":"2025-07-31T14:34:02.000Z","lastEditAuthor":"Gerald Yeo","publicationDate":"2025-07-30T15:59:59.000Z","file":{"relativePath":"apps/ui/docs/adr/20250730-create-a-design-system-and-ui-kit.md","absolutePath":"/home/runner/work/after6ix.dev/after6ix.dev/apps/ui/docs/adr/20250730-create-a-design-system-and-ui-kit.md"},"repository":{"provider":"github","viewUrl":"https://github.com/geraldyeo/after6ix.dev/blob/master/apps/ui/docs/adr/20250730-create-a-design-system-and-ui-kit.md"}},"l4bVersion":"1.1.0"},"__N_SSG":true}