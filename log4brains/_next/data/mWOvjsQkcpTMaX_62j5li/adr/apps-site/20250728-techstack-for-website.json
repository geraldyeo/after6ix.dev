{"pageProps":{"projectName":"@after6ix","currentAdr":{"slug":"apps-site/20250728-techstack-for-website","package":"apps-site","title":"Techstack for website","status":"proposed","supersededBy":null,"tags":["frontend","static-site","astro","deployment"],"deciders":["Gerald Yeo"],"body":{"enhancedMdx":"\nTechnical Story: Selecting the appropriate tech stack for the After6ix main website that will serve as a blog and services showcase, while preparing for future SaaS integrations.\n\n## Context and Problem Statement\n\nWe need to build a performant, SEO-optimized website for After6ix that serves as a blog and services showcase. The site must be able to integrate with future SaaS offerings (CV/resume improver, photo colorization) that will be deployed on subdomains. How do we choose a tech stack that balances simplicity for static content with the ability to share components and authentication with more complex SaaS applications?\n\n## Decision Drivers\n\n- **SEO optimization** - Critical for blog discoverability and organic traffic\n- **Page load speed** - Essential for user experience and SEO rankings\n- **Component sharing** - Need to share UI components across main site and SaaS apps\n- **No vendor lock-in** - Maintain flexibility in deployment and hosting options\n- **Developer experience** - Simple content authoring with MDX, not overly complex\n- **Future extensibility** - Support for authentication consistency across subdomains\n- **Deployment flexibility** - Ability to deploy via SST to AWS or Cloudflare\n\n## Considered Options\n\n- **Astro** - Static site generator with React integration\n- **Next.js** - Full-stack React framework with SSG/SSR capabilities\n- **Remix** - Full-stack React framework focused on web standards\n- **Vanilla React + Vite** - Custom static site setup\n\n## Decision Outcome\n\nChosen option: **Astro**, because it excels at static site generation with excellent performance and SEO capabilities while allowing React components for interactivity. It avoids the complexity of Remix and the vendor lock-in concerns with Next.js, while still enabling component sharing with future TanStack Start applications.\n\n### Positive Consequences\n\n- Exceptional performance with minimal JavaScript by default\n- Built-in SEO optimizations and content collections for blog management\n- Can share React components and Tailwind/shadcn UI system with SaaS apps\n- MDX support out of the box for rich content authoring\n- Flexible deployment options via SST to either AWS or Cloudflare\n- Clear separation of concerns between static content and dynamic SaaS apps\n\n### Negative Consequences\n\n- Limited server-side capabilities (mitigated by using TanStack Start for SaaS)\n- Need to configure cross-subdomain authentication separately\n- Requires careful planning for shared component library structure\n\n## Pros and Cons of the Options\n\n### Astro\n\nModern static site generator optimized for content-focused websites with selective hydration.\n\n- Good, because it ships zero JavaScript by default, resulting in blazing fast page loads\n- Good, because it has first-class MDX support and content collections for blog management\n- Good, because it supports multiple UI frameworks (React, Vue, Svelte) with islands architecture\n- Good, because it has excellent build performance and optimized asset handling\n- Good, because it integrates well with Tailwind CSS and component libraries\n- Bad, because it lacks built-in server-side features for dynamic functionality\n- Bad, because authentication needs to be handled externally or via edge functions\n\n### Next.js\n\nFull-stack React framework with extensive ecosystem and features.\n\n- Good, because it offers complete full-stack capabilities (SSG, SSR, API routes)\n- Good, because it has a massive ecosystem and community support\n- Good, because it provides built-in image optimization and performance features\n- Bad, because it has vendor lock-in concerns with Vercel-specific optimizations\n- Bad, because it ships more JavaScript than necessary for a mostly static site\n- Bad, because recent versions have increased complexity with App Router\n\n### Remix\n\nModern full-stack framework focused on web standards and progressive enhancement.\n\n- Good, because it follows web standards and progressive enhancement principles\n- Good, because it has excellent data loading patterns and error handling\n- Good, because it works well with edge computing platforms\n- Bad, because it's overly complex for a primarily static blog site\n- Bad, because it has a steeper learning curve compared to static site generators\n- Bad, because the ecosystem is smaller than Next.js or Astro\n\n### Vanilla React + Vite\n\nCustom setup using React with Vite as the build tool.\n\n- Good, because it offers complete control over the architecture\n- Good, because Vite provides fast development experience\n- Good, because there's no framework lock-in\n- Bad, because it requires building all static site features from scratch\n- Bad, because SEO optimization needs manual implementation\n- Bad, because content management and routing need custom solutions\n\n## Links\n\n- [Astro Documentation](https://astro.build/)\n- [SST Documentation](https://sst.dev/)\n- [TanStack Start](https://tanstack.com/start) - For future SaaS applications\n- Related to future ADR: Authentication strategy across subdomains\n- Related to future ADR: Shared component library architecture\n"},"creationDate":"2025-07-29T03:04:47.000Z","lastEditDate":"2025-07-29T03:37:31.000Z","lastEditAuthor":"Gerald Yeo","publicationDate":"2025-07-29T15:59:59.000Z","file":{"relativePath":"apps/site/docs/adr/20250728-techstack-for-website.md","absolutePath":"/home/runner/work/after6ix.dev/after6ix.dev/apps/site/docs/adr/20250728-techstack-for-website.md"},"repository":{"provider":"github","viewUrl":"https://github.com/geraldyeo/after6ix.dev/blob/master/apps/site/docs/adr/20250728-techstack-for-website.md"}},"l4bVersion":"1.1.0"},"__N_SSG":true}